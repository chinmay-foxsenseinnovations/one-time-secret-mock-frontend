import {
  Button,
  ButtonToolbar,
  Checkbox,
  CheckboxGroup,
  Container,
  Content,
  ControlLabel,
  FlexboxGrid,
  Form,
  FormControl,
  FormGroup,
  Header,
  HelpBlock,
  InputNumber,
  Navbar,
  Panel,
  Uploader,
} from 'rsuite';
import { isEmpty, isNull } from 'lodash';

import ApiManager from '../../api/ApiManager';
import HelperUtils from '../../utils/HelperUtils';
import HttpConstants from '../../constants/HttpConstants';
import MessageComponent from '../../components/common/rSuite/MessageComponent';
import React from 'react';
import RouteConstants from '../../constants/RouteConstants';
import UrlConstants from '../../constants/UrlConstants';
import { toast } from 'react-toastify';

class ContentPageRsuite extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      content: '',
      passPhrase: '',
      validTill: 1,
      file: null,
      generatePassphrase: false,

      token: '',
      autoGeneratedPassphrase: null,

      isFileUploaded: false,
      loading: false,
    };
  }

  handleSubmit = () => {
    try {
      const {
        content,
        passPhrase,
        validTill,
        generatePassphrase,
        file,
      } = this.state;
      this.setState({ loading: true });

      // const data = {
      //   content,
      //   passPhrase,
      //   TTL: validTill,
      //   generatePassphrase,
      // };

      const formData = new FormData();
      formData.set('content', content);
      formData.set('passPhrase', passPhrase);
      formData.set('TTL', validTill);
      formData.set('generatePassphrase', generatePassphrase);
      formData.append('file', file);

      ApiManager.makeApiCall(
        UrlConstants.CREATE_SECRET_CONTENT,
        HttpConstants.POST_METHOD,
        formData
      )
        .then((response) => {
          this.setState({
            loading: false,
            token: response.data.data.token,
            autoGeneratedPassphrase: response.data.data.passPhrase
              ? response.data.data.passPhrase
              : null,
          });
          toast.success('Secret content created successfully', {
            backgroundColor: 'green',
          });
        })
        .catch((err) => {
          toast.error('Secret content created successfully', {
            backgroundColor: 'red',
          });
        });
    } catch (error) {
      console.log('err - ', error);
    }
  };

  render() {
    const {
      content,
      passPhrase,
      generatePassphrase,
      validTill,
      token,
      autoGeneratedPassphrase,
      file,
    } = this.state;
    return (
      <div className='show-fake-browser login-page'>
        <Container>
          <Header>
            <Navbar appearance='inverse'>
              <Navbar.Header>
                <a href='/' className='navbar-brand logo'>
                  OneTimeSecret Mock
                </a>
              </Navbar.Header>
            </Navbar>
          </Header>
          <Content style={{ marginTop: '50px' }}>
            <FlexboxGrid justify='center'>
              <FlexboxGrid.Item colspan={12}>
                {!isEmpty(token) && (
                  <MessageComponent
                    token={token}
                    autoGeneratedPassphrase={autoGeneratedPassphrase}
                  />
                )}
                <Panel header={<h3>Create you secret content</h3>} shaded>
                  <Form>
                    <FormGroup>
                      <ControlLabel>Secret</ControlLabel>
                      <FormControl
                        name='secret'
                        componentClass='textarea'
                        placeholder='Your secret...'
                        rows={5}
                        onChange={(e) => {
                          this.setState({
                            content: e,
                          });
                        }}
                        value={content}
                        disabled={!isEmpty(token)}
                      />
                      <HelpBlock tooltip>Required</HelpBlock>
                    </FormGroup>
                    <FormGroup>
                      <ControlLabel>Upload Secret File</ControlLabel>
                      <FormControl
                        name='file'
                        accepter={Uploader}
                        action={process.env.REACT_APP_JSON_SERVER}
                        onChange={(value) =>
                          this.setState({ file: value[0].blobFile })
                        }
                        disabled={!isNull(file)}
                      />
                    </FormGroup>
                    <FormGroup>
                      <ControlLabel>Passphrase</ControlLabel>
                      <FormControl
                        name='passphrase'
                        placeholder='Pass Phrase'
                        onChange={(e) => {
                          this.setState({
                            passPhrase: e,
                          });
                        }}
                        value={passPhrase}
                        disabled={generatePassphrase || !isEmpty(token)}
                      />
                    </FormGroup>
                    <FormGroup>
                      <FormControl name='checkbox' accepter={CheckboxGroup}>
                        <Checkbox
                          value='GeneratePassphrase'
                          style={{ marginLeft: '-150px' }}
                          onChange={(e) => {
                            this.setState({
                              generatePassphrase: !this.state
                                .generatePassphrase,
                            });
                          }}
                          disabled={!isEmpty(token)}
                        >
                          Generate Passphrase
                        </Checkbox>
                      </FormControl>
                    </FormGroup>
                    <FormGroup>
                      <ControlLabel>Valid Till</ControlLabel>
                      <FormControl
                        name='number'
                        accepter={InputNumber}
                        defaultValue={validTill}
                        min={1}
                        postfix={'minutes'}
                        onChange={(e) => this.setState({ validTill: e })}
                        disabled={!isEmpty(token)}
                      />
                    </FormGroup>
                    <FormGroup>
                      <ButtonToolbar>
                        {isEmpty(token) ? (
                          <Button
                            appearance='primary'
                            onClick={this.handleSubmit}
                            disabled={isEmpty(content)}
                          >
                            Submit
                          </Button>
                        ) : (
                          <Button
                            appearance='primary'
                            onClick={() => {
                              window.location.href = HelperUtils.generateUrlForFrontend(
                                RouteConstants.RSUITE_CONTENT_PAGE
                              );
                            }}
                          >
                            Create New Secret
                          </Button>
                        )}
                      </ButtonToolbar>
                    </FormGroup>
                  </Form>
                </Panel>
              </FlexboxGrid.Item>
            </FlexboxGrid>
          </Content>
        </Container>
      </div>
    );
  }
}

export default ContentPageRsuite;
